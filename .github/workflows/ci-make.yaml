name: Deploy Ontology Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java for WIDOCO
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Setup Python for ROBOT
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Cache ROBOT JAR
      uses: actions/cache@v4
      with:
        path: ~/robot.jar
        key: robot-1.9.6
        
    - name: Download ROBOT if not cached
      run: |
        if [ ! -f ~/robot.jar ]; then
          curl -L https://github.com/ontodev/robot/releases/latest/download/robot.jar -o ~/robot.jar
        fi
        
    - name: Cache WIDOCO JAR  
      uses: actions/cache@v4
      with:
        path: ~/widoco.jar
        key: widoco-1.4.25
        
    - name: Download WIDOCO if not cached
      run: |
        if [ ! -f ~/widoco.jar ]; then
          curl -L https://github.com/dgarijo/Widoco/releases/download/v1.4.25/widoco-1.4.25-jar-with-dependencies.jar -o ~/widoco.jar
        fi
    
    - name: Validate ontology files with ROBOT
      run: |
        echo "Validating ontology files..."
        for ttl_file in *.ttl; do
          if [ -f "$ttl_file" ]; then
            echo "Validating $ttl_file"
            java -jar ~/robot.jar report --input "$ttl_file" --output "reports/${ttl_file%.ttl}-report.tsv" || true
          fi
        done
        
    - name: Create directory structure for GitHub Pages
      run: |
        mkdir -p docs/ontology
        mkdir -p docs/reports
        mkdir -p docs/downloads
        
    - name: Generate different RDF serializations
      run: |
        echo "Converting Turtle files to other RDF formats..."
        for ttl_file in *.ttl; do
          if [ -f "$ttl_file" ]; then
            base_name="${ttl_file%.ttl}"
            echo "Converting $ttl_file to multiple formats..."
            
            # Convert to RDF/XML
            java -jar ~/robot.jar convert --input "$ttl_file" --format owl --output "docs/downloads/${base_name}.owl"
            
            # Convert to JSON-LD
            java -jar ~/robot.jar convert --input "$ttl_file" --format jsonld --output "docs/downloads/${base_name}.jsonld"
            
            # Convert to N-Triples
            java -jar ~/robot.jar convert --input "$ttl_file" --format nt --output "docs/downloads/${base_name}.nt"
            
            # Copy original Turtle
            cp "$ttl_file" "docs/downloads/${base_name}.ttl"
          fi
        done
        
    - name: Generate ontology documentation with WIDOCO
      run: |
        echo "Generating ontology documentation..."
        for ttl_file in *.ttl; do
          if [ -f "$ttl_file" ]; then
            base_name="${ttl_file%.ttl}"
            echo "Generating documentation for $ttl_file..."
            
            java -jar ~/widoco.jar -ontFile "$ttl_file" -outFolder "docs/ontology/$base_name" -htaccess -webVowl -rewriteAll || true
          fi
        done
        
    - name: Create main index page
      run: |
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Package Management Ontologies</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                .container { max-width: 1200px; margin: 0 auto; }
                .ontology-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                .ontology-card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; background: #f9f9f9; }
                .format-links { margin-top: 15px; }
                .format-links a { margin-right: 10px; padding: 5px 10px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 0.9em; }
                .format-links a:hover { background: #005a87; }
                h1, h2 { color: #333; }
                .namespace { font-family: monospace; background: #f0f0f0; padding: 2px 6px; border-radius: 3px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Package Management RDF Ontologies</h1>
                <p>A comprehensive collection of RDF/OWL ontologies for representing software packages, repositories, and metadata across major package management systems.</p>
                
                <h2>Available Ontologies</h2>
                <div class="ontology-grid">
        EOF
        
        # Add cards for each ontology
        for ttl_file in *.ttl; do
          if [ -f "$ttl_file" ]; then
            base_name="${ttl_file%.ttl}"
            
            # Extract title from ontology file
            title=$(grep -m1 "rdfs:label\|dc:title\|dct:title" "$ttl_file" | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
            if [ -z "$title" ]; then
              title="$base_name"
            fi
            
            # Extract description 
            description=$(grep -m1 "rdfs:comment\|dc:description\|dct:description" "$ttl_file" | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
            if [ -z "$description" ]; then
              description="Ontology for $base_name package management system"
            fi
            
            # Extract namespace
            namespace=$(grep -m1 "@prefix.*: <http.*>" "$ttl_file" | sed 's/.*<\([^>]*\)>.*/\1/' | head -1)
            
            cat >> docs/index.html << EOF
                    <div class="ontology-card">
                        <h3>$title</h3>
                        <p>$description</p>
                        <p><strong>Namespace:</strong> <span class="namespace">$namespace</span></p>
                        <div class="format-links">
                            <a href="ontology/$base_name/index-en.html">Documentation</a>
                            <a href="downloads/$base_name.ttl">Turtle</a>
                            <a href="downloads/$base_name.owl">RDF/XML</a>
                            <a href="downloads/$base_name.jsonld">JSON-LD</a>
                            <a href="downloads/$base_name.nt">N-Triples</a>
                        </div>
                    </div>
        EOF
          fi
        done
        
        cat >> docs/index.html << 'EOF'
                </div>
                
                <h2>Content Negotiation</h2>
                <p>The ontologies support content negotiation. You can request different formats using the Accept header:</p>
                <ul>
                    <li><code>text/turtle</code> - Turtle format</li>
                    <li><code>application/rdf+xml</code> - RDF/XML format</li>
                    <li><code>application/ld+json</code> - JSON-LD format</li>
                    <li><code>application/n-triples</code> - N-Triples format</li>
                    <li><code>text/html</code> - HTML documentation</li>
                </ul>
                
                <h2>Usage Examples</h2>
                <pre><code># Get Turtle representation
        curl -H "Accept: text/turtle" https://packagegraph.github.io/ontology/core

        # Get JSON-LD representation  
        curl -H "Accept: application/ld+json" https://packagegraph.github.io/ontology/debian

        # Get HTML documentation (default)
        curl -H "Accept: text/html" https://packagegraph.github.io/ontology/rpm</code></pre>
            </div>
        </body>
        </html>
        EOF
        
    - name: Create Jekyll configuration for GitHub Pages
      run: |
        cat > docs/_config.yml << 'EOF'
        # Jekyll configuration for GitHub Pages
        plugins:
          - jekyll-redirect-from
          
        # Content negotiation through Jekyll
        collections:
          ontologies:
            output: true
            
        defaults:
          - scope:
              path: "downloads"
            values:
              layout: null
              
        # MIME type mappings  
        plugins:
          - jekyll-redirect-from
          
        # Enable safe mode for GitHub Pages
        safe: true
        
        # Set base URL for GitHub Pages
        baseurl: "/ontology"
        url: "https://packagegraph.github.io"
        EOF
        
    - name: Create content negotiation redirects
      run: |
        echo "Creating content negotiation setup..."
        
        # Create individual ontology landing pages that handle content negotiation via JavaScript
        for ttl_file in *.ttl; do
          if [ -f "$ttl_file" ]; then
            base_name="${ttl_file%.ttl}"
            
            mkdir -p "docs/$base_name"
            
            cat > "docs/$base_name/index.html" << EOF
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>$base_name Ontology</title>
            <link rel="alternate" type="text/turtle" href="../downloads/$base_name.ttl" />
            <link rel="alternate" type="application/rdf+xml" href="../downloads/$base_name.owl" />
            <link rel="alternate" type="application/ld+json" href="../downloads/$base_name.jsonld" />
            <link rel="alternate" type="application/n-triples" href="../downloads/$base_name.nt" />
            <script>
                // Simple content negotiation via JavaScript for GitHub Pages
                (function() {
                    var accept = getAcceptHeader();
                    var baseUrl = '../downloads/$base_name';
                    
                    if (accept.includes('text/turtle') || accept.includes('text/plain')) {
                        window.location.href = baseUrl + '.ttl';
                    } else if (accept.includes('application/rdf+xml') || accept.includes('application/xml')) {
                        window.location.href = baseUrl + '.owl';  
                    } else if (accept.includes('application/ld+json') || accept.includes('application/json')) {
                        window.location.href = baseUrl + '.jsonld';
                    } else if (accept.includes('application/n-triples')) {
                        window.location.href = baseUrl + '.nt';
                    } else if (!accept.includes('text/html')) {
                        // Default to HTML documentation for browsers
                        window.location.href = '../ontology/$base_name/index-en.html';
                    }
                    
                    function getAcceptHeader() {
                        // GitHub Pages doesn't give us access to request headers
                        // This is a limitation - users need to use direct links
                        return 'text/html';
                    }
                })();
            </script>
        </head>
        <body>
            <h1>$base_name Ontology</h1>
            <p>This is the $base_name ontology. Choose your preferred format:</p>
            <ul>
                <li><a href="../ontology/$base_name/index-en.html">HTML Documentation</a></li>
                <li><a href="../downloads/$base_name.ttl">Turtle (.ttl)</a></li>
                <li><a href="../downloads/$base_name.owl">RDF/XML (.owl)</a></li>
                <li><a href="../downloads/$base_name.jsonld">JSON-LD (.jsonld)</a></li>
                <li><a href="../downloads/$base_name.nt">N-Triples (.nt)</a></li>
            </ul>
            
            <h2>Programmatic Access</h2>
            <p>For programmatic access, use these direct URLs:</p>
            <pre><code># Turtle format
        wget https://packagegraph.github.io/ontology/downloads/$base_name.ttl

        # RDF/XML format  
        wget https://packagegraph.github.io/ontology/downloads/$base_name.owl

        # JSON-LD format
        wget https://packagegraph.github.io/ontology/downloads/$base_name.jsonld

        # N-Triples format
        wget https://packagegraph.github.io/ontology/downloads/$base_name.nt</code></pre>
        </body>
        </html>
        EOF
          fi
        done
        
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
