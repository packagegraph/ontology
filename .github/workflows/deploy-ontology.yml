---
name: Deploy Ontology Documentation
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: pages
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Java for WIDOCO
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'
      - name: Setup Python for ROBOT
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache ROBOT JAR
        uses: actions/cache@v4
        with:
          path: ~/robot.jar
          key: robot-1.9.6
      - name: Download ROBOT if not cached
        run: |
          if [ ! -f ~/robot.jar ]; then
            curl -L https://github.com/ontodev/robot/releases/latest/download/robot.jar -o ~/robot.jar
          fi
      - name: Cache WIDOCO JAR
        uses: actions/cache@v4
        with:
          path: ~/widoco.jar
          key: widoco-1.4.25
      - name: Download WIDOCO if not cached
        run: |
          if [ ! -f ~/widoco.jar ]; then
            echo "Downloading WIDOCO..."
            # Try primary download
            if curl -L -o ~/widoco.jar https://github.com/dgarijo/Widoco/releases/download/v1.4.25/widoco-1.4.25-jar-with-dependencies_JDK-17.jar; then
              echo "WIDOCO download complete. File size: $(ls -lh ~/widoco.jar)"
            else
              echo "Primary download failed, trying alternative..."
              # Alternative: try a different version or source
              curl -L -o ~/widoco.jar https://github.com/dgarijo/Widoco/releases/download/v1.4.25/widoco-1.4.25-jar-with-dependencies_JDK-17.jar || true
            fi
            
            # Verify the jar file is valid
            if [ ! -s ~/widoco.jar ]; then
              echo "WIDOCO download failed, file is empty"
              rm -f ~/widoco.jar
            elif [ "$(stat -f%z ~/widoco.jar 2>/dev/null || stat -c%s ~/widoco.jar)" -lt 1000 ]; then
              echo "WIDOCO jar too small, likely failed download"
              rm -f ~/widoco.jar
            fi
          fi
      - name: Validate ontology files with ROBOT
        run: |
          echo "Validating ontology files..."
          mkdir -p reports
          for ttl_file in *.ttl; do
            if [ -f "$ttl_file" ]; then
              echo "Validating $ttl_file"
              java -jar ~/robot.jar report --input "$ttl_file" --output "reports/${ttl_file%.ttl}-report.tsv" || true
            fi
          done
      - name: Create directory structure for GitHub Pages
        run: |
          mkdir -p docs/ontology
          mkdir -p docs/reports
          mkdir -p docs/downloads
          # Copy validation reports if they exist
          if [ -d reports ]; then
            cp reports/*.tsv docs/reports/ 2>/dev/null || true
          fi
      - name: Generate different RDF serializations
        run: |
          echo "Converting Turtle files to other RDF formats..."
          for ttl_file in *.ttl; do
            if [ -f "$ttl_file" ]; then
              base_name="${ttl_file%.ttl}"
              echo "Converting $ttl_file to multiple formats..."

              # Convert to RDF/XML
              java -jar ~/robot.jar convert --input "$ttl_file" --format owl --output "docs/downloads/${base_name}.owl" || true

              # Create JSON-LD placeholder (ROBOT doesn't support JSON-LD directly)
              echo '{"@context": {"@vocab": "http://www.w3.org/2002/07/owl#"}, "@id": "placeholder", "@type": "Ontology", "rdfs:comment": "JSON-LD format not supported by ROBOT. Please use RDF/XML or Turtle formats."}' > "docs/downloads/${base_name}.jsonld"

              # Convert to N-Triples (ROBOT uses 'nt' format internally)
              java -jar ~/robot.jar convert --input "$ttl_file" --output "docs/downloads/${base_name}.nt" || true

              # Copy original Turtle
              cp "$ttl_file" "docs/downloads/${base_name}.ttl"
            fi
          done
      - name: Generate ontology documentation with WIDOCO
        run: |
          echo "Generating ontology documentation..."
          # Check if WIDOCO downloaded correctly
          if [ ! -f ~/widoco.jar ] || [ ! -s ~/widoco.jar ]; then
            echo "WIDOCO jar not found or empty, skipping documentation generation"
            exit 0
          fi

          for ttl_file in *.ttl; do
            if [ -f "$ttl_file" ]; then
              base_name="${ttl_file%.ttl}"
              echo "Generating documentation for $ttl_file..."

              # Create basic directory structure even if WIDOCO fails
              mkdir -p "docs/ontology/$base_name"

              # Try WIDOCO generation with timeout
              timeout 300 java -jar ~/widoco.jar -ontFile "$ttl_file" -outFolder "docs/ontology/$base_name" -htaccess -webVowl -rewriteAll || {
                echo "WIDOCO failed for $ttl_file, creating basic HTML documentation"

                # Create a basic HTML page if WIDOCO fails
                {
                  echo '<!DOCTYPE html>'
                  echo '<html>'
                  echo '<head>'
                  echo "    <title>$base_name Ontology Documentation</title>"
                  echo '</head>'
                  echo '<body>'
                  echo "    <h1>$base_name Ontology</h1>"
                  echo '    <p>Automated documentation generation failed. Please refer to the source files:</p>'
                  echo '    <ul>'
                  echo "        <li><a href=\"../../downloads/$base_name.ttl\">Turtle format</a></li>"
                  echo "        <li><a href=\"../../downloads/$base_name.owl\">OWL/RDF format</a></li>"
                  echo '    </ul>'
                  echo '</body>'
                  echo '</html>'
                } > "docs/ontology/$base_name/index-en.html"
              }
            fi
          done
      - name: Create main index page
        run: |
          {
            echo '<!DOCTYPE html>'
            echo '<html lang="en">'
            echo '<head>'
            echo '    <meta charset="UTF-8">'
            echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
            echo '    <title>Package Management Ontologies</title>'
            echo '    <style>'
            echo '        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }'
            echo '        .container { max-width: 1200px; margin: 0 auto; }'
            echo '        .ontology-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }'
            echo '        .ontology-card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; background: #f9f9f9; }'
            echo '        .format-links { margin-top: 15px; }'
            echo '        .format-links a { margin-right: 10px; padding: 5px 10px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 0.9em; }'
            echo '        .format-links a:hover { background: #005a87; }'
            echo '        h1, h2 { color: #333; }'
            echo '        .namespace { font-family: monospace; background: #f0f0f0; padding: 2px 6px; border-radius: 3px; }'
            echo '    </style>'
            echo '</head>'
            echo '<body>'
            echo '    <div class="container">'
            echo '        <h1>Package Management RDF Ontologies</h1>'
            echo '        <p>A comprehensive collection of RDF/OWL ontologies for representing software packages, repositories, and metadata across major package management systems.</p>'
            echo ''
            echo '        <h2>Available Ontologies</h2>'
            echo '        <div class="ontology-grid">'
          } > docs/index.html

          # Add cards for each ontology
          for ttl_file in *.ttl; do
            if [ -f "$ttl_file" ]; then
              base_name="${ttl_file%.ttl}"

              # Extract title from ontology file
              title=$(grep -m1 "rdfs:label\|dc:title\|dct:title" "$ttl_file" | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
              if [ -z "$title" ]; then
                title="$base_name"
              fi

              # Extract description
              description=$(grep -m1 "rdfs:comment\|dc:description\|dct:description" "$ttl_file" | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
              if [ -z "$description" ]; then
                description="Ontology for $base_name package management system"
              fi

              # Extract namespace
              namespace=$(grep -m1 "@prefix.*: <http.*>" "$ttl_file" | sed 's/.*<\([^>]*\)>.*/\1/' | head -1)

              {
                echo '                      <div class="ontology-card">'
                echo "                          <h3>$title</h3>"
                echo "                          <p>$description</p>"
                echo "                          <p><strong>Namespace:</strong> <span class=\"namespace\">$namespace</span></p>"
                echo '                          <div class="format-links">'
                echo "                              <a href=\"ontology/$base_name/index-en.html\">Documentation</a>"
                echo "                              <a href=\"downloads/$base_name.ttl\">Turtle</a>"
                echo "                              <a href=\"downloads/$base_name.owl\">RDF/XML</a>"
                echo "                              <a href=\"downloads/$base_name.jsonld\">JSON-LD</a>"
                echo "                              <a href=\"downloads/$base_name.nt\">N-Triples</a>"
                echo '                          </div>'
                echo '                      </div>'
              } >> docs/index.html
            fi
          done
          {
            echo '        </div>'
            echo ''
            echo '        <h2>Content Negotiation</h2>'
            echo '        <p>The ontologies support content negotiation. You can request different formats using the Accept header:</p>'
            echo '        <ul>'
            echo '            <li><code>text/turtle</code> - Turtle format</li>'
            echo '            <li><code>application/rdf+xml</code> - RDF/XML format</li>'
            echo '            <li><code>application/ld+json</code> - JSON-LD format</li>'
            echo '            <li><code>application/n-triples</code> - N-Triples format</li>'
            echo '            <li><code>text/html</code> - HTML documentation</li>'
            echo '        </ul>'
            echo ''
            echo '        <h2>Usage Examples</h2>'
            echo '        <pre><code># Get Turtle representation'
            echo 'curl -H "Accept: text/turtle" https://packagegraph.github.io/ontology/core'
            echo ''
            echo '# Get JSON-LD representation'
            echo 'curl -H "Accept: application/ld+json" https://packagegraph.github.io/ontology/debian'
            echo ''
            echo '# Get HTML documentation (default)'
            echo 'curl -H "Accept: text/html" https://packagegraph.github.io/ontology/rpm</code></pre>'
            echo '    </div>'
            echo '</body>'
            echo '</html>'
          } >> docs/index.html
      - name: Create Jekyll configuration for GitHub Pages
        run: |
          {
            echo '# Jekyll configuration for GitHub Pages'
            echo 'plugins:'
            echo '  - jekyll-redirect-from'
            echo ''
            echo '# Content negotiation through Jekyll'
            echo 'collections:'
            echo '  ontologies:'
            echo '    output: true'
            echo ''
            echo 'defaults:'
            echo '  - scope:'
            echo '      path: "downloads"'
            echo '    values:'
            echo '      layout: null'
            echo ''
            echo '# Enable safe mode for GitHub Pages'
            echo 'safe: true'
            echo ''
            echo '# Set base URL for GitHub Pages'
            echo 'baseurl: "/ontology"'
            echo 'url: "https://packagegraph.github.io"'
          } > docs/_config.yml
      - name: Create content negotiation redirects
        run: |
          echo "Creating content negotiation setup..."

          # Create individual ontology landing pages that handle content negotiation via JavaScript
          for ttl_file in *.ttl; do
            if [ -f "$ttl_file" ]; then
              base_name="${ttl_file%.ttl}"

              mkdir -p "docs/$base_name"

              {
                echo '<!DOCTYPE html>'
                echo '<html lang="en">'
                echo '<head>'
                echo '    <meta charset="UTF-8">'
                echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
                echo "    <title>$base_name Ontology</title>"
                echo "    <link rel=\"alternate\" type=\"text/turtle\" href=\"../downloads/$base_name.ttl\" />"
                echo "    <link rel=\"alternate\" type=\"application/rdf+xml\" href=\"../downloads/$base_name.owl\" />"
                echo "    <link rel=\"alternate\" type=\"application/ld+json\" href=\"../downloads/$base_name.jsonld\" />"
                echo "    <link rel=\"alternate\" type=\"application/n-triples\" href=\"../downloads/$base_name.nt\" />"
                echo '    <script>'
                echo '        // Simple content negotiation via JavaScript for GitHub Pages'
                echo '        (function() {'
                echo '            var accept = getAcceptHeader();'
                echo "            var baseUrl = '../downloads/$base_name';"
                echo ''
                echo "            if (accept.includes('text/turtle') || accept.includes('text/plain')) {"
                echo "                window.location.href = baseUrl + '.ttl';"
                echo "            } else if (accept.includes('application/rdf+xml') || accept.includes('application/xml')) {"
                echo "                window.location.href = baseUrl + '.owl';"
                echo "            } else if (accept.includes('application/ld+json') || accept.includes('application/json')) {"
                echo "                window.location.href = baseUrl + '.jsonld';"
                echo "            } else if (accept.includes('application/n-triples')) {"
                echo "                window.location.href = baseUrl + '.nt';"
                echo "            } else if (!accept.includes('text/html')) {"
                echo '                // Default to HTML documentation for browsers'
                echo "                window.location.href = '../ontology/$base_name/index-en.html';"
                echo '            }'
                echo ''
                echo '            function getAcceptHeader() {'
                echo '                // GitHub Pages doesn'\''t give us access to request headers'
                echo '                // This is a limitation - users need to use direct links'
                echo "                return 'text/html';"
                echo '            }'
                echo '        })();'
                echo '    </script>'
                echo '</head>'
                echo '<body>'
                echo "    <h1>$base_name Ontology</h1>"
                echo "    <p>This is the $base_name ontology. Choose your preferred format:</p>"
                echo '    <ul>'
                echo "        <li><a href=\"../ontology/$base_name/index-en.html\">HTML Documentation</a></li>"
                echo "        <li><a href=\"../downloads/$base_name.ttl\">Turtle (.ttl)</a></li>"
                echo "        <li><a href=\"../downloads/$base_name.owl\">RDF/XML (.owl)</a></li>"
                echo "        <li><a href=\"../downloads/$base_name.jsonld\">JSON-LD (.jsonld)</a></li>"
                echo "        <li><a href=\"../downloads/$base_name.nt\">N-Triples (.nt)</a></li>"
                echo '    </ul>'
                echo ''
                echo '    <h2>Programmatic Access</h2>'
                echo '    <p>For programmatic access, use these direct URLs:</p>'
                echo '    <pre><code># Turtle format'
                echo "wget https://packagegraph.github.io/ontology/downloads/$base_name.ttl"
                echo ''
                echo '# RDF/XML format'
                echo "wget https://packagegraph.github.io/ontology/downloads/$base_name.owl"
                echo ''
                echo '# JSON-LD format'
                echo "wget https://packagegraph.github.io/ontology/downloads/$base_name.jsonld"
                echo ''
                echo '# N-Triples format'
                echo "wget https://packagegraph.github.io/ontology/downloads/$base_name.nt</code></pre>"
                echo '</body>'
                echo '</html>'
              } > "docs/$base_name/index.html"
            fi
          done
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
